class CBasePlayer : public CBaseMonster {
    enum MusicState {SILENT, CALM, INTENSE};
    public:
    int random_seed;
    unsigned short m_usPlayerBleed;
    EHANDLE m_hObserverTarget;
    float m_flNextObserverInput;
    int m_iObserverWeapon;
    int m_iObserverC4State;
    bool m_bObserverHasDefuser;
    int m_iObserverLastMode;
    float m_flFlinchTime;
    float m_flAnimTime;
    bool m_bHighDamage;
    float m_flVelocityModifier;
    int m_iLastZoom;
    bool m_bResumeZoom;
    float m_flEjectBrass;
    int m_iKevlar;
    bool m_bNotKilled;
    TeamName m_iTeam;
    int m_iAccount;
    bool m_bHasPrimary;
    float m_flDeathThrowTime;
    int m_iThrowDirection;
    float m_flLastTalk;
    bool m_bJustConnected;
    bool m_bContextHelp;
    JoinState m_iJoiningState;
    CBaseEntity *m_pIntroCamera;
    float m_fIntroCamTime;
    float m_fLastMovement;
    bool m_bMissionBriefing;
    bool m_bTeamChanged;
    ModelName m_iModelName;
    int m_iTeamKills;
    int m_iIgnoreGlobalChat;
    bool m_bHasNightVision;
    bool m_bNightVisionOn;
    Vector m_vRecentPath[20];
    float m_flIdleCheckTime;
    float m_flRadioTime;
    int m_iRadioMessages;
    bool m_bIgnoreRadio;
    bool m_bHasC4;
    bool m_bHasDefuser;
    bool m_bKilledByBomb;
    Vector m_vBlastVector;
    bool m_bKilledByGrenade;
    CHintMessageQueue m_hintMessageQueue;
    int32 m_flDisplayHistory;
    _Menu m_iMenu;
    int m_iChaseTarget;
    CBaseEntity *m_pChaseTarget;
    float m_fCamSwitch;
    bool m_bEscaped;
    bool m_bIsVIP;
    float m_tmNextRadarUpdate;
    Vector m_vLastOrigin;
    int m_iCurrentKickVote;
    float m_flNextVoteTime;
    bool m_bJustKilledTeammate;
    int m_iHostagesKilled;
    int m_iMapVote;
    bool m_bCanShoot;
    float m_flLastFired;
    float m_flLastAttackedTeammate;
    bool m_bHeadshotKilled;
    bool m_bPunishedForTK;
    bool m_bReceivesNoMoneyNextRound;
    int m_iTimeCheckAllowed;
    bool m_bHasChangedName;
    char m_szNewName[32];
    bool m_bIsDefusing;
    float m_tmHandleSignals;
    CUnifiedSignals m_signals;
    edict_t *m_pentCurBombTarget;
    int m_iPlayerSound;
    int m_iTargetVolume;
    int m_iWeaponVolume;
    int m_iExtraSoundTypes;
    int m_iWeaponFlash;
    float m_flStopExtraSoundTime;
    float m_flFlashLightTime;
    int m_iFlashBattery;
    int m_afButtonLast;
    int m_afButtonPressed;
    int m_afButtonReleased;
    edict_t *m_pentSndLast;
    float m_flSndRoomtype;
    float m_flSndRange;
    float m_flFallVelocity;
    int m_rgItems[4];
    int m_fNewAmmo;
    unsigned int m_afPhysicsFlags;
    float m_fNextSuicideTime;
    float m_flTimeStepSound;
    float m_flTimeWeaponIdle;
    float m_flSwimTime;
    float m_flDuckTime;
    float m_flWallJumpTime;
    float m_flSuitUpdate;
    int m_rgSuitPlayList[4];
    int m_iSuitPlayNext;
    int m_rgiSuitNoRepeat[32];
    float m_rgflSuitNoRepeatTime[32];
    int m_lastDamageAmount;
    float m_tbdPrev;
    float m_flgeigerRange;
    float m_flgeigerDelay;
    int m_igeigerRangePrev;
    int m_iStepLeft;
    char m_szTextureName[17];
    char m_chTextureType;
    int m_idrowndmg;
    int m_idrownrestored;
    int m_bitsHUDDamage;
    BOOL m_fInitHUD;
    BOOL m_fGameHUDInitialized;
    int m_iTrain;
    BOOL m_fWeapon;
    EHANDLE m_pTank;
    float m_fDeadTime;
    BOOL m_fNoPlayerSound;
    BOOL m_fLongJump;
    float m_tSneaking;
    int m_iUpdateTime;
    int m_iClientHealth;
    int m_iClientBattery;
    int m_iHideHUD;
    int m_iClientHideHUD;
    int m_iFOV;
    int m_iClientFOV;
    int m_iNumSpawns;
    CBaseEntity *m_pObserver;
    CBasePlayerItem *m_rgpPlayerItems[6];
    CBasePlayerItem *m_pActiveItem;
    CBasePlayerItem *m_pClientActiveItem;
    CBasePlayerItem *m_pLastItem;
    int m_rgAmmo[32];
    int m_rgAmmoLast[32];
    Vector m_vecAutoAim;
    BOOL m_fOnTarget;
    int m_iDeaths;
    int m_izSBarState[4];
    float m_flNextSBarUpdateTime;
    float m_flStatusBarDisappearDelay;
    char m_SbarString0[128];
    int m_lastx;
    int m_lasty;
    int m_nCustomSprayFrames;
    float m_flNextDecalTime;
    char m_szTeamName[16];
    protected:
    int m_modelIndexPlayer;
    public:
    static TYPEDESCRIPTION m_playerSaveData[];
    char m_szAnimExtention[32];
    int m_iGaitsequence;
    float m_flGaitframe;
    float m_flGaityaw;
    Vector m_prevgaitorigin;
    float m_flPitch;
    float m_flYaw;
    float m_flGaitMovement;
    int m_iAutoWepSwitch;
    bool m_bVGUIMenus;
    bool m_bShowHints;
    bool m_bShieldDrawn;
    bool m_bOwnsShield;
    bool m_bWasFollowing;
    float m_flNextFollowTime;
    float m_flYawModifier;
    float m_blindUntilTime;
    float m_blindStartTime;
    float m_blindHoldTime;
    float m_blindFadeTime;
    int m_blindAlpha;
    float m_allowAutoFollowTime;
    char m_autoBuyString[256];
    char *m_rebuyString;
    RebuyStruct m_rebuyStruct;
    bool m_bIsInRebuy;
    protected:
    float m_flLastUpdateTime;
    char m_lastLocation[32];
    public:
    float m_progressStart;
    float m_progressEnd;
    protected:
    bool m_bObserverAutoDirector;
    public:
    bool m_canSwitchObserverModes;
    float m_heartBeatTime;
    float m_intenseTimestamp;
    float m_silentTimestamp;
    CBasePlayer::MusicState m_musicState;
    float m_flLastCommandTime[8];
    int m_iLastAccount;
    int m_iLastClientHealth;
    float m_tmNextAccountHealthUpdate;

    void SpawnClientSideCorpse(void);
    void Observer_FindNextPlayer(bool, const char *);
    CBaseEntity * Observer_IsValidTarget(int, bool);
    void Observer_HandleButtons(void);
    void Observer_SetMode(int);
    void Observer_CheckTarget(void);
    void Observer_CheckProperties(void);
    int IsObserver(void);
    void PlantC4(void);
    void Radio(const char *, const char *, short, bool);
    CBasePlayer * GetNextRadioRecipient(CBasePlayer *);
    void SmartRadio(void);
    void ThrowWeapon(char *);
    void ThrowPrimary(void);
    void AddAccount(int, bool);
    void Disappear(void);
    void MakeVIP(void);
    bool CanPlayerBuy(bool);
    void SwitchTeam(void);
    void TabulateAmmo(void);
    virtual void Spawn(void);
    void Pain(int, bool);
    virtual void Jump(void);
    virtual void Duck(void);
    virtual void PreThink(void);
    virtual void PostThink(void);
    virtual Vector GetGunPosition(void);
    virtual int TakeHealth(float, int);
    virtual void TraceAttack(entvars_t *, float, Vector, TraceResult *, int);
    virtual int TakeDamage(entvars_t *, entvars_t *, float, int);
    virtual void Killed(entvars_t *, int);
    virtual Vector BodyTarget(const Vector &);
    virtual void StartSneaking(void);
    virtual void StopSneaking(void);
    virtual BOOL IsSneaking(void);
    virtual BOOL IsAlive(void);
    virtual BOOL ShouldFadeOnDeath(void);
    virtual BOOL IsPlayer(void);
    virtual BOOL IsBot(void);
    BOOL IsBombGuy(void);
    bool IsLookingAtPosition(const Vector *, float) const;
    virtual BOOL IsNetClient(void);
    virtual const char * TeamID(void);
    virtual int Save(CSave &);
    virtual int Restore(CRestore &);
    void Reset(void);
    void SetScoreboardAttributes(CBasePlayer *);
    void RenewItems(void);
    void PackDeadPlayerItems(void);
    void GiveDefaultItems(void);
    void RemoveAllItems(BOOL);
    void SetBombIcon(BOOL);
    void SetProgressBarTime(int);
    void SetProgressBarTime2(int, float);
    void SetPlayerModel(BOOL);
    void SetNewPlayerModel(const char *);
    BOOL SwitchWeapon(CBasePlayerItem *);
  protected:
    void CheckPowerups(entvars_t *);
  public:
    bool CanAffordPrimary(void);
    bool CanAffordPrimaryAmmo(void);
    bool CanAffordSecondaryAmmo(void);
    bool CanAffordArmor(void);
    bool CanAffordDefuseKit(void);
    bool CanAffordGrenade(void);
    bool NeedsPrimaryAmmo(void);
    bool NeedsSecondaryAmmo(void);
    bool NeedsArmor(void);
    bool NeedsDefuseKit(void);
    bool NeedsGrenade(void);
    virtual void UpdateClientData(void);
    virtual int ObjectCaps(void);
    virtual void Precache(void);
    BOOL IsOnLadder(void);
    BOOL FlashlightIsOn(void);
    void FlashlightTurnOn(void);
    void FlashlightTurnOff(void);
    void UpdatePlayerSound(void);
    void DeathSound(void);
    virtual int Classify(void);
    void SetAnimation(PLAYER_ANIM);
    void SetWeaponAnimType(const char *);
    virtual void ImpulseCommands(void);
    void CheatImpulseCommands(int);
    virtual void RoundRespawn(void);
    void StartDeathCam(void);
    void StartObserver(Vector, Vector);
    virtual void AddPoints(int, BOOL);
    virtual void AddPointsToTeam(int, BOOL);
    void HandleSignals(void);
    virtual BOOL AddPlayerItem(CBasePlayerItem *);
    virtual BOOL RemovePlayerItem(CBasePlayerItem *);
    void DropPlayerItem(const char *);
    BOOL HasPlayerItem(CBasePlayerItem *);
    BOOL HasNamedPlayerItem(const char *);
    BOOL HasWeapons(void);
    void SelectPrevItem(int);
    void SelectNextItem(int);
    void SelectLastItem(void);
    void SelectItem(const char *);
    void ItemPreFrame(void);
    void ItemPostFrame(void);
    void GiveNamedItem(const char *);
    void EnableControl(BOOL);
    virtual void ResetMaxSpeed(void);
    bool HintMessage(const char *, BOOL, BOOL);
    virtual int GiveAmmo(int, char *, int);
    void SendAmmoUpdate(void);
    void SendFOV(int);
    void WaterMove(void);
    void PlayerDeathThink(void);
    void PlayerUse(void);
    void HostageUsed(void);
    void JoiningThink(void);
    void RemoveLevelText(void);
    void MenuPrint(CBasePlayer *, const char *);
    void ResetMenu(void);
    void SyncRoundTimer(void);
    void CheckSuitUpdate(void);
    void SetSuitUpdate(char *, int, int);
    void UpdateGeigerCounter(void);
    void CheckTimeBasedDamage(void);
    virtual BOOL FBecomeProne(void);
    void BarnacleVictimBitten(entvars_t *);
    void BarnacleVictimReleased(void);
    static int GetAmmoIndex(const char *);
    int AmmoInventory(int);
    virtual int Illumination(void);
    void ResetAutoaim(void);
    virtual Vector GetAutoaimVector(float);
    Vector AutoaimDeflection(Vector &, float, float);
    void ForceClientDllUpdate(void);
    void DeathMessage(entvars_t *);
    void SetCustomDecalFrames(int);
    int GetCustomDecalFrames(void);
    void InitStatusBar(void);
    void UpdateStatusBar(void);
    void StudioEstimateGait(void);
    void StudioPlayerBlend(int *, float *);
    void CalculatePitchBlend(void);
    void CalculateYawBlend(void);
    void StudioProcessGait(void);
    void SendHostagePos(void);
    void SendHostageIcons(void);
    void ResetStamina(void);
    BOOL IsArmored(int);
    BOOL ShouldDoLargeFlinch(int, int);
    void SetPrefsFromUserinfo(char *);
    void SendWeatherInfo(void);
    void UpdateShieldCrosshair(bool);
    bool HasShield(void);
    bool IsProtectedByShield(void);
    void RemoveShield(void);
    void DropShield(bool);
    void GiveShield(bool);
    bool IsHittingShield(const Vector &, TraceResult *);
    bool IsReloading(void);
    bool IsBlind(void) const;
    virtual void Blind(float, float, float, int);
    virtual void OnTouchingWeapon(CWeaponBox *);
    bool IsAutoFollowAllowed(void) const;
    void InhibitAutoFollow(float);
    void AllowAutoFollow(void);
    void ClearAutoBuyData(void);
    void AddAutoBuyData(const char *);
    void AutoBuy(void);
    protected:
    void ClientCommand(const char *, const char *, const char *, const char *);
    void PrioritizeAutoBuyString(char *, const char *);
    public:
    const char * PickPrimaryCareerTaskWeapon(void);
    const char * PickSecondaryCareerTaskWeapon(void);
    const char * PickFlashKillWeaponString(void);
    const char * PickGrenadeKillWeaponString(void);
    bool ShouldExecuteAutoBuyCommand(const AutoBuyInfoStruct *, bool, bool);
    void PostAutoBuyCommandProcessing(const AutoBuyInfoStruct *, bool &, bool &);
    void ParseAutoBuyString(const char *, bool &, bool &);
    AutoBuyInfoStruct * GetAutoBuyCommandInfo(const char *);
    void InitRebuyData(const char *);
    void BuildRebuyStruct(void);
    void Rebuy(void);
    void RebuyPrimaryWeapon(void);
    void RebuyPrimaryAmmo(void);
    void RebuySecondaryWeapon(void);
    void RebuySecondaryAmmo(void);
    void RebuyHEGrenade(void);
    void RebuyFlashbang(void);
    void RebuySmokeGrenade(void);
    void RebuyDefuser(void);
    void RebuyNightVision(void);
    void RebuyArmor(void);
    void UpdateLocation(bool);
    void SetObserverAutoDirector(bool);
    bool IsObservingPlayer(CBasePlayer *);
    bool CanSwitchObserverModes(void) const;
    void Intense(void);
};
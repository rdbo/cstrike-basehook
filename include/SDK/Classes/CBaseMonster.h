class CBaseMonster : public CBaseToggle {
  public:
    Activity m_Activity;
    Activity m_IdealActivity;
    int m_LastHitGroup;
    int m_bitsDamageType;
    unsigned char m_rgbTimeBasedDamage[8];
    MONSTERSTATE m_MonsterState;
    MONSTERSTATE m_IdealMonsterState;
    int m_afConditions;
    int m_afMemory;
    float m_flNextAttack;
    EHANDLE m_hEnemy;
    EHANDLE m_hTargetEnt;
    float m_flFieldOfView;
    int m_bloodColor;
    Vector m_HackedGunPos;
    Vector m_vecEnemyLKP;

    virtual void KeyValue(KeyValueData *);
    void MakeIdealYaw(Vector);
    virtual float ChangeYaw(int);
    virtual BOOL HasHumanGibs(void);
    virtual BOOL HasAlienGibs(void);
    virtual void FadeMonster(void);
    virtual void GibMonster(void);
    virtual Activity GetDeathActivity(void);
    Activity GetSmallFlinchActivity(void);
    virtual void BecomeDead(void);
    BOOL ShouldGibMonster(int);
    void CallGibMonster(void);
    virtual BOOL ShouldFadeOnDeath(void);
    BOOL FCheckAITrigger(void);
    virtual int IRelationship(CBaseEntity *);
    virtual int TakeHealth(float, int);
    virtual int TakeDamage(entvars_t *, entvars_t *, float, int);
    int DeadTakeDamage(entvars_t *, entvars_t *, float, int);
    float DamageForce(float);
    virtual void Killed(entvars_t *, int);
    virtual void PainSound(void);
    virtual void ResetMaxSpeed(void);
    void RadiusDamage(entvars_t *, entvars_t *, float, int, int);
    void RadiusDamage(Vector, entvars_t *, entvars_t *, float, int, int);
    void RadiusDamage2(Vector, entvars_t *, entvars_t *, float, int, int);
    void SetConditions(int);
    void ClearConditions(int);
    BOOL HasConditions(int);
    BOOL HasAllConditions(int);
    void Remember(int);
    void Forget(int);
    BOOL HasMemory(int);
    BOOL HasAllMemories(int);
    void StopAnimation(void);
    virtual void ReportAIState(void);
    virtual void MonsterInitDead(void);
    void CorpseFallThink(void);
    virtual void Look(int);
    virtual CBaseEntity * BestVisibleEnemy(void);
    CBaseEntity * CheckTraceHullAttack(float, int, int);
    virtual BOOL FInViewCone(CBaseEntity *);
    virtual BOOL FInViewCone(Vector *);
    virtual void TraceAttack(entvars_t *, float, Vector, TraceResult *, int);
    void MakeDamageBloodDecal(int, float, TraceResult *, const Vector &);
    virtual BOOL IsAlive(void);
    virtual int BloodColor(void);
    void MonsterUse(CBaseEntity *, CBaseEntity *, USE_TYPE, float);
    void BloodSplat(Vector &, Vector &, int, int);
};
class CSave;
class CRestore;
class CBaseMonster;
class CSquadMonster;
struct TraceResult;
class CBasePlayerItem;

struct CBaseEntity {
  public:
    entvars_t *pev;
    CBaseEntity *m_pGoalEnt;
    CBaseEntity *m_pLink;
    static TYPEDESCRIPTION m_SaveData[];
    void (CBaseEntity::*m_pfnThink)(CBaseEntity * const);
    void (CBaseEntity::*m_pfnTouch)(CBaseEntity * const, CBaseEntity *);
    void (CBaseEntity::*m_pfnUse)(CBaseEntity * const, CBaseEntity *, CBaseEntity *, USE_TYPE, float);
    void (CBaseEntity::*m_pfnBlocked)(CBaseEntity * const, CBaseEntity *);
    int *current_ammo;
    float currentammo;
    int maxammo_buckshot;
    int ammo_buckshot;
    int maxammo_9mm;
    int ammo_9mm;
    int maxammo_556nato;
    int ammo_556nato;
    int maxammo_556natobox;
    int ammo_556natobox;
    int maxammo_762nato;
    int ammo_762nato;
    int maxammo_45acp;
    int ammo_45acp;
    int maxammo_50ae;
    int ammo_50ae;
    int maxammo_338mag;
    int ammo_338mag;
    int maxammo_57mm;
    int ammo_57mm;
    int maxammo_357sig;
    int ammo_357sig;
    float m_flStartThrow;
    float m_flReleaseThrow;
    int m_iSwing;
    bool has_disconnected;

    virtual void Spawn(void);
    virtual void Precache(void);
    virtual void Restart(void);
    virtual void KeyValue(KeyValueData *);
    virtual int Save(CSave &);
    virtual int Restore(CRestore &);
    virtual int ObjectCaps(void);
    virtual void Activate(void);
    virtual void SetObjectCollisionBox(void);
    virtual int Classify(void);
    virtual void DeathNotice(entvars_t *);
    virtual void TraceAttack(entvars_t *, float, Vector, TraceResult *, int);
    virtual int TakeDamage(entvars_t *, entvars_t *, float, int);
    virtual int TakeHealth(float, int);
    virtual void Killed(entvars_t *, int);
    virtual int BloodColor(void);
    virtual void TraceBleed(float, Vector, TraceResult *, int);
    virtual BOOL IsTriggered(CBaseEntity *);
    virtual CBaseMonster * MyMonsterPointer(void);
    virtual CSquadMonster * MySquadMonsterPointer(void);
    virtual int GetToggleState(void);
    virtual void AddPoints(int, BOOL);
    virtual void AddPointsToTeam(int, BOOL);
    virtual BOOL AddPlayerItem(CBasePlayerItem *);
    virtual BOOL RemovePlayerItem(CBasePlayerItem *);
    virtual int GiveAmmo(int, char *, int);
    virtual float GetDelay(void);
    virtual int IsMoving(void);
    virtual void OverrideReset(void);
    virtual int DamageDecal(int);
    virtual void SetToggleState(int);
    virtual void StartSneaking(void);
    virtual void StopSneaking(void);
    virtual BOOL OnControls(entvars_t *);
    virtual BOOL IsSneaking(void);
    virtual BOOL IsAlive(void);
    virtual BOOL IsBSPModel(void);
    virtual BOOL ReflectGauss(void);
    virtual BOOL HasTarget(string_t);
    virtual BOOL IsInWorld(void);
    virtual BOOL IsPlayer(void);
    virtual BOOL IsNetClient(void);
    virtual const char * TeamID(void);
    virtual CBaseEntity * GetNextTarget(void);
    virtual void Think(void);
    virtual void Touch(CBaseEntity *);
    virtual void Use(CBaseEntity *, CBaseEntity *, USE_TYPE, float);
    virtual void Blocked(CBaseEntity *);
    static void * operator new(size_t, entvars_t *);
    void UpdateOnRemove(void);
    void SUB_Remove(void);
    void SUB_DoNothing(void);
    void SUB_StartFadeOut(void);
    void SUB_FadeOut(void);
    void SUB_CallUseToggle(void);
    int ShouldToggle(USE_TYPE, BOOL);
    void FireBullets(ULONG, Vector, Vector, Vector, float, int, int, int, entvars_t *);
    Vector FireBullets3(Vector, Vector, float, float, int, int, int, float, entvars_t *, bool, int);
    virtual CBaseEntity * Respawn(void);
    void SUB_UseTargets(CBaseEntity *, USE_TYPE, float);
    int Intersects(CBaseEntity *);
    void MakeDormant(void);
    int IsDormant(void);
    BOOL IsLockedByMaster(void);
    static CBaseEntity * Instance(edict_t *);
    static CBaseEntity * Instance(entvars_t *);
    static CBaseEntity * Instance(int);
    CBaseMonster * GetMonsterPointer(entvars_t *);
    CBaseMonster * GetMonsterPointer(edict_t *);
    virtual void UpdateOwner(void);
    static CBaseEntity * Create(char *, const Vector &, const Vector &, edict_t *);
    virtual BOOL FBecomeProne(void);
    edict_t * edict(void);
    EOFFSET eoffset(void);
    int entindex(void);
    virtual Vector Center(void);
    virtual Vector EyePosition(void);
    virtual Vector EarPosition(void);
    virtual Vector BodyTarget(const Vector &);
    virtual int Illumination(void);
    virtual BOOL FVisible(CBaseEntity *);
    virtual BOOL FVisible(const Vector &);
};